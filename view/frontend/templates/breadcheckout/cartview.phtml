<?php /* @var $this Bread\BreadCheckout\Block\Checkout\Overview */ ?>
<?php  echo $this->getBeforeHtml(); ?>
<div id="bread-btn-cntnr">
    <div id="bread-checkout-btn" title="Bread Checkout" class="button" <?php echo $this->getIsDefaultSize(); ?>>
        <span>
            <span><?php echo __('Bread Checkout'); ?></span>
        </span>
    </div>
    <div class="button-prevent" id="button-prevent">
        <span class="buy_error_tip override_tip">&nbsp;</span>
    </div>
</div>

<script type="text/javascript">
    require(['jquery',
        'jquery/validate'], function($){
        String.prototype.toCamelCase = function() {
            return this.replace(/(?:^\w|[A-Z]|\b\w)/g, function(letter, index) {
                return index == 0 ? letter.toLowerCase() : letter.toUpperCase();
            }).replace(/\s+/g, '');
        }

        var noHintValidation = function (name, elm, useTitle) {
            var v       = $(name);
            var prop    = '__advice' + name.toCamelCase();
            v.validate();
            if ($(elm).is(':visible') && !v.valid()) {
                return false;
            } else {
                return true;
            }
        };

        document.configureButton = function (items) {
            var address             = <?php echo $this->getShippingAddressData(); ?>;
            var billingAddress      = <?php echo $this->getBillingAddressData(); ?>;
            var buttonCss           = '<?php echo $this->getButtonDesign(); ?>';

            var breadConfig = {
                buttonId: "bread-checkout-btn",
                asLowAs: <?php echo $this->getAsLowAs(); ?>,
                actAsLabel: false,
                items: items,
                discounts: <?php echo $this->getDiscountDataJson(); ?>,
                allowCheckout: <?php echo $this->getAllowCheckout(); ?>,

                done: function (err, tx_token) {
                    if (tx_token !== undefined) {
                        var i = document.createElement('input');
                        i.type = 'hidden';
                        i.name = 'token';
                        i.value = tx_token;
                        var f = document.createElement('form');
                        f.action = '<?php echo $this->getValidateOrderUrl(); ?>';
                        f.method = 'POST';
                        f.appendChild(i);
                        document.body.appendChild(f);
                        f.submit();
                    }

                    return;
                },

                /**
                 * Calculate tax value callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateTax: function (shippingAddress, callback) {
                    console.log('calculateTax called');
                    shippingAddress.block_key                       = '<?php echo $this->getBlockCode(); ?>';
                    shippingAddress.additional_data                 = <?php echo  $this->jsonEncode($this->setAdditionalData()); ?>;
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;

                    $.ajax({
                        url: '<?php echo $this->getTaxEstimationUrl(); ?>',
                        data: {shippingInfo: JSON.stringify(shippingAddress)},
                        type: 'post'
                    }).done(function (transport) {
                        console.log(transport);
                        try {
                            var response = $.parseJSON(transport.responseText);
                            if (typeof response == 'object') {
                                if (response.error) {
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            console.log(e);
                        }
                    });
                },

                /**
                 * Calculate shipping cost callback
                 *
                 * @param shippingAddress
                 * @param callback
                 */
                calculateShipping: function (shippingAddress, callback) {
                    console.log('calculateShipping called');
                    shippingAddress.block_key                       = '<?php echo $this->getBlockCode(); ?>';
                    shippingAddress.additional_data                 = <?php echo  $this->jsonEncode($this->setAdditionalData()); ?>;
                    shippingAddress.selected_sku                    = document.selectedSku + document.customOptions;
                    shippingAddress.selected_simple_product_id      = document.selectedSimpleProductId;
                    shippingAddress.main_product_id                 = document.productId;

                    $.ajax({
                        url: '<?php echo $this->getShippingAddressEstimationUrl(); ?>',
                        data: shippingAddress,
                        type: 'post'
                    }).done(function (transport) {
                        console.log(transport);
                        try {
                            var response = $.parseJSON(transport.responseText);
                            if (typeof response == 'object') {
                                if (response.error) {
                                    alert(response.message);
                                } else {
                                    callback(null, response.result);
                                }
                            }
                        }
                        catch (e) {
                            console.log(e);
                        }
                    });
                }
            };

            if (buttonCss !== null && buttonCss !== '' && buttonCss != false) {
                breadConfig.customCSS = buttonCss;
            }

            if (address !== false) {
                breadConfig.shippingContact = address;
            }

            if (billingAddress !== false) {
                breadConfig.billingContact = billingAddress;
            }


            if (buttonOnProduct === true) {
                breadConfig.actAsLabel = false;
            }

            bread.checkout(breadConfig);
        };

        <?php if( $this->getProduct() != null ): ?>

        testIsValid = function() {
            console.log('testIsValid called');
            realValidation      = $('#product_addtocart_form').validate();
            document.validationTest     = noHintValidation;
            var o               = document.getElementById("button-prevent");
            if ( realValidation.valid() ) {
                o.style.height      = "0px";
                o.style.width       = "0px";
            }
            else {
                o.style.height      = '100%';
                o.style.width       = '100%';
            }

            document.validationTest = realValidation;
        };

        document.resetPriceAndSku = function () {
            console.log('resetPriceAndSku called');
            testIsValid();

            if ((typeof optionsPrice == 'undefined') ||
                (typeof optionsPrice.productPrice == 'undefined')) {
                document.configureButton(document.defaultItems);
            }
            else {
                price = optionsPrice.productPrice;

                if (typeof(optionsPrice.optionPrices.config) != 'undefined') {
                    price += optionsPrice.optionPrices.config.price;
                }

                for (key in optionsPrice.customPrices) {
                    if (optionsPrice.customPrices.hasOwnProperty(key)) {
                        price += optionsPrice.customPrices[key].price;
                    }
                }

                sku = document.selectedSku + document.customOptions;
                if (sku != document.previousSku || price != document.previousPrice) {
                    document.previousSku                    = sku;
                    document.previousPrice                  = price;
                    document.defaultItems[0]["sku"]         = document.previousSku;
                    document.defaultItems[0]["price"]       = document.previousPrice * 100;
                    document.configureButton(document.defaultItems);
                }
            }
        };
        <?php endif; ?>
        $(document).ready(function () {
            document.defaultItems       = <?php echo $this->getProductDataJson(); ?>;
            document.previousPrice      = document.defaultItems[0]["price"];
            document.previousSku        = document.defaultItems[0]["sku"];

            <?php if ($this->getProduct() != null): ?>
            document.customOptions = "";
            document.productId                      = '<?php echo $this->getProduct()->getId(); ?>';
            document.baseProductSku                 = '<?php echo $this->getProduct()->getSku(); ?>';
            document.selectedSku                    = '<?php echo $this->getProduct()->getSku(); ?>';
            document.selectedSimpleProductId        = '<?php echo $this->getProduct()->getId(); ?>';
            var o = document.getElementById("button-prevent");
            o.addEventListener('click', function (e) {
                $('#product_addtocart_form').validate();
            }, true);
            document.resetPriceAndSku();
            <?php else: ?>
            document.configureButton(document.defaultItems);
            <?php endif; ?>
        });
    });
</script>